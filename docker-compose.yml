version: '3'
services:
  # Se crea el servicio postgres
  postgres:
    image: 'postgres:latest'
  # Se crea el servicio redis
  redis:
    image: 'redis:latest'
  # Se crea el servicio api
  api:
    # Se le dice que depende del service postgre
    depends_on:
      - postgres
    # Se define como crear la imagen
    build:
      # Nombre del dockerfile, no se indica el path
      dockerfile: Dockerfile.dev
      # Path donde esta el dockerfile y source code
      context: ./server
    # Se hace el mapeo de volumenes para dev
    volumes:
      # Mapea /app a lo que hay debajo de ./server excepto /app/node_modules
      - /app/node_modules
      - ./server:/app
    # Se especifica las variables de entorno para que la aplicacion funcione. Al mismo nivel que volumes
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
  # Se crea el servicio client que será muy parecido a server
  client:
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
  # Se crea el servicio worker que será muy parecido a server
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  # Se crea el servicio nginx para la redireccion
  nginx:
    # Siempre que se caiga, intenta arrancarlo de nuevo ayq ue hace el route de toda la aplicacion
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80'